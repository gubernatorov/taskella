openapi: 3.0.3
info:
  title: Taskella API
  version: 1.0.0
  description: API для управления проектами и задачами в Taskella
  contact:
    name: Development Team
    email: dev@taskella.ru

servers:
  - url: https://api.taskella.ru/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

paths:
  /health:
    get:
      summary: Проверка состояния сервера
      description: Проверяет работоспособность API
      responses:
        '200':
          description: Сервер работает
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: Health check failed
                  timestamp:
                    type: string
                    format: date-time

  /init-db:
    post:
      summary: Инициализация базы данных
      description: Инициализирует базу данных с начальными данными
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                force:
                  type: boolean
                  description: Принудительная пересоздание базы данных
                  default: false
      responses:
        '200':
          description: База данных успешно инициализирована
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: База данных успешно инициализирована
        '403':
          description: Доступ запрещен (не в development режиме)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Инициализация БД доступна только в development режиме
        '500':
          description: Ошибка инициализации базы данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Ошибка инициализации базы данных
                  details:
                    type: string

  /auth/dev:
    post:
      summary: Разработка - Вход в систему (только для разработки)
      description: Вход в систему с использованием тестового пользователя (доступен только в development режиме)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 123456789
                    first_name:
                      type: string
                      example: Test
                    last_name:
                      type: string
                      example: User
                    username:
                      type: string
                      example: testuser
      responses:
        '200':
          description: Успешный вход в систему
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: jwt.token.here
                  user:
                    $ref: '#/components/schemas/User'
        '403':
          description: Доступ запрещен (не в development режиме)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Development login is not available in production
        '500':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Development authentication failed

  /auth/me:
    get:
      summary: Получить информацию о текущем пользователе
      description: Возвращает информацию о текущем авторизованном пользователе
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Пользователь не найден
                  code:
                    type: string
                    example: USER_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /auth/telegram:
    post:
      summary: Вход через Telegram
      description: Аутентификация пользователя через Telegram
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramAuthRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка авторизации
                  code:
                    type: string
                    example: AUTH_ERROR
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /projects:
    get:
      summary: Получить список проектов
      description: Возвращает список проектов с возможностью фильтрации и пагинации
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Номер страницы
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Количество элементов на странице
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived, suspended]
          description: Статус проекта для фильтрации
        - name: search
          in: query
          schema:
            type: string
          description: Поиск по названию или описанию проекта
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список проектов
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 100
                      pages:
                        type: integer
                        example: 5
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    post:
      summary: Создать новый проект
      description: Создает новый проект с указанными параметрами
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Проект успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Некорректные данные
                  code:
                    type: string
                    example: INVALID_DATA
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /projects/{id}:
    get:
      summary: Получить проект по ID
      description: Возвращает информацию о конкретном проекте
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID проекта
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Проект найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект не найден
                  code:
                    type: string
                    example: PROJECT_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    put:
      summary: Обновить проект
      description: Обновляет информацию о проекте
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID проекта
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Проект успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Некорректные данные
                  code:
                    type: string
                    example: INVALID_DATA
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект не найден
                  code:
                    type: string
                    example: PROJECT_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    delete:
      summary: Удалить проект
      description: Удаляет проект и все связанные задачи
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID проекта
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Проект успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект успешно удален
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект не найден
                  code:
                    type: string
                    example: PROJECT_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /projects/{id}/tasks:
    get:
      summary: Получить задачи проекта
      description: Возвращает список задач для конкретного проекта с возможностью фильтрации и пагинации
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID проекта
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Номер страницы
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Количество элементов на странице
        - name: status
          in: query
          schema:
            type: string
            enum: [todo, in_progress, in_review, done, cancelled]
          description: Статус задачи для фильтрации
        - name: assigneeId
          in: query
          schema:
            type: string
          description: ID ответственного пользователя для фильтрации
        - name: search
          in: query
          schema:
            type: string
          description: Поиск по названию или описанию задачи
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список задач проекта
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 100
                      pages:
                        type: integer
                        example: 5
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект не найден
                  code:
                    type: string
                    example: PROJECT_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /tasks:
    get:
      summary: Получить список задач
      description: Возвращает список задач с возможностью фильтрации и пагинации
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Номер страницы
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Количество элементов на странице
        - name: status
          in: query
          schema:
            type: string
            enum: [todo, in_progress, in_review, done, cancelled]
          description: Статус задачи для фильтрации
        - name: assigneeId
          in: query
          schema:
            type: string
          description: ID ответственного пользователя для фильтрации
        - name: projectId
          in: query
          schema:
            type: string
          description: ID проекта для фильтрации
        - name: search
          in: query
          schema:
            type: string
          description: Поиск по названию или описанию задачи
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список задач
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 100
                      pages:
                        type: integer
                        example: 5
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    post:
      summary: Создать новую задачу
      description: Создает новую задачу с указанными параметрами
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Задача успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Некорректные данные
                  code:
                    type: string
                    example: INVALID_DATA
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

  /tasks/{id}:
    get:
      summary: Получить задачу по ID
      description: Возвращает информацию о конкретной задаче
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID задачи
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Задача найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Задача не найдена
                  code:
                    type: string
                    example: TASK_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    put:
      summary: Обновить задачу
      description: Обновляет информацию о задаче
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID задачи
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Задача успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Некорректные данные
                  code:
                    type: string
                    example: INVALID_DATA
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Задача не найдена
                  code:
                    type: string
                    example: TASK_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

    delete:
      summary: Удалить задачу
      description: Удаляет задачу
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID задачи
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Задача успешно удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Задача успешно удалена
        '401':
          description: Токен не предоставлен или недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Токен не предоставлен
                  code:
                    type: string
                    example: NO_TOKEN
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Задача не найдена
                  code:
                    type: string
                    example: TASK_NOT_FOUND
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ошибка сервера
                  code:
                    type: string
                    example: INTERNAL_ERROR

components:
  schemas:
    Project:
      type: object
      required:
        - id
        - name
        - key
        - status
        - owner
        - membersCount
        - tasksCount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Новый проект"
        description:
          type: string
          example: "Описание проекта"
        key:
          type: string
          example: "PROJ-123"
        status:
          type: string
          enum: [active, archived, suspended]
          example: active
        owner:
          $ref: '#/components/schemas/User'
        membersCount:
          type: integer
          example: 5
        tasksCount:
          type: integer
          example: 10
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    CreateProjectRequest:
      type: object
      required:
        - name
        - key
      properties:
        name:
          type: string
          example: "Новый проект"
        description:
          type: string
          example: "Описание проекта"
        key:
          type: string
          example: "PROJ-123"

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: "Обновленное название проекта"
        description:
          type: string
          example: "Обновленное описание проекта"
        status:
          type: string
          enum: [active, archived, suspended]
          example: active

    Task:
      type: object
      required:
        - id
        - key
        - title
        - status
        - priority
        - type
        - reporter
        - project
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        key:
          type: string
          example: "TASK-123"
        title:
          type: string
          example: "Задача"
        description:
          type: string
          example: "Описание задачи"
        status:
          type: string
          enum: [todo, in_progress, in_review, done, cancelled]
          example: todo
        priority:
          type: string
          enum: [lowest, low, medium, high, highest]
          example: medium
        type:
          type: string
          enum: [task, bug, feature, epic, story]
          example: task
        assignee:
          $ref: '#/components/schemas/User'
        reporter:
          $ref: '#/components/schemas/User'
        project:
          $ref: '#/components/schemas/Project'
        estimatedHours:
          type: number
          example: 8
        loggedHours:
          type: number
          example: 4
        dueDate:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    CreateTaskRequest:
      type: object
      required:
        - title
        - type
        - priority
      properties:
        title:
          type: string
          example: "Задача"
        description:
          type: string
          example: "Описание задачи"
        type:
          type: string
          enum: [task, bug, feature, epic, story]
          example: task
        priority:
          type: string
          enum: [lowest, low, medium, high, highest]
          example: medium
        assigneeId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        estimatedHours:
          type: number
          example: 8
        dueDate:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Обновленное название задачи"
        description:
          type: string
          example: "Обновленное описание задачи"
        status:
          type: string
          enum: [todo, in_progress, in_review, done, cancelled]
          example: in_progress
        priority:
          type: string
          enum: [lowest, low, medium, high, highest]
          example: medium
        assigneeId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        estimatedHours:
          type: number
          example: 8
        loggedHours:
          type: number
          example: 4
        dueDate:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    User:
      type: object
      required:
        - id
        - telegramId
        - firstName
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        telegramId:
          type: integer
          example: 123456789
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Петров"
        username:
          type: string
          example: "ivan_petrov"
        avatarUrl:
          type: string
          example: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    AuthResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          example: "jwt.token.here"
        user:
          $ref: '#/components/schemas/User'

    TelegramAuthRequest:
      type: object
      required:
        - initData
      properties:
        initData:
          type: string
          example: "query_id=AA...&user=%7B%22id%22..."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT