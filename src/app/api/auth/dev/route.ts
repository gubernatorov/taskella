import { NextRequest, NextResponse } from 'next/server'
import jwt from 'jsonwebtoken'
import { UserRepository } from '@/lib/db/repositories/userRepository'

// –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç endpoint –¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω

const userRepo = new UserRepository()

export async function POST(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (process.env.NODE_ENV === 'production') {
    return NextResponse.json(
      { error: 'Development login is not available in production' },
      { status: 403 }
    )
  }

  try {
    const body = await request.json()
    const { user } = body

    const telegramId = user.id || 123456789
    const firstName = user.first_name || 'Test'
    const lastName = user.last_name || 'User'
    const username = user.username || 'testuser'

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    let dbUser = await userRepo.findByTelegramId(telegramId)
    
    if (!dbUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      console.log('User not found, attempting to initialize database...')
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { initializeDatabase } = await import('@/lib/db/init')
        await initializeDatabase({ force: false, seedData: true, createIndexes: true })
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        dbUser = await userRepo.findByTelegramId(telegramId)
      } catch (initError) {
        console.error('Failed to initialize database:', initError)
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!dbUser) {
        dbUser = await userRepo.create({
          telegramId,
          firstName,
          lastName,
          username,
        })
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å userId –∏–∑ –ë–î
    const token = jwt.sign(
      {
        userId: dbUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –≤–º–µ—Å—Ç–æ id
        telegramId: dbUser.telegramId,
        first_name: dbUser.firstName,
        last_name: dbUser.lastName,
        username: dbUser.username,
        is_dev: true, // –ú–∞—Ä–∫–µ—Ä, —á—Ç–æ —ç—Ç–æ dev-—Ç–æ–∫–µ–Ω
      },
      process.env.JWT_SECRET || 'dev-secret-key',
      { expiresIn: '7d' }
    )

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookie
    const jsonResponse = NextResponse.json({
      success: true,
      token,
      user: dbUser,
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    jsonResponse.cookies.set('auth_token', token, {
      httpOnly: true,
      secure: false, // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ false
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    })
    
    console.log('üç™ Dev auth: Cookie set in response')
    
    return jsonResponse
  } catch (error) {
    console.error('Dev auth error:', error)
    return NextResponse.json(
      { error: 'Development authentication failed' },
      { status: 500 }
    )
  }
}