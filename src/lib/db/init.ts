import { runMigrations } from './migrate'
import { seedDatabase } from './seed'
import { db } from './connection'
import { users, projects, tasks, projectMembers, comments } from './schema'
import { sql } from 'drizzle-orm'

export interface InitOptions {
  force?: boolean
  seedData?: boolean
  createIndexes?: boolean
}

export async function initializeDatabase(options: InitOptions = {}) {
  const { force = false, seedData = true, createIndexes = true } = options
  
  console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { force, seedData, createIndexes })
  
  try {
    // 1. –ï—Å–ª–∏ force=true, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–∞–±–ª–∏—Ü—ã
    if (force) {
      console.log('üîÑ –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î...')
      await dropAllTables()
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã')
    }
    
    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã)
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...')
    await runMigrations()
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    
    // 3. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (createIndexes) {
      await createPerformanceIndexes()
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const stats = await getDatabaseStats()
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:', stats)
    
    // 5. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (seedData && (force || stats.users === 0)) {
      console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
      await seedDatabase()
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    } else if (stats.users > 0) {
      console.log('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç')
    }
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const finalStats = await getDatabaseStats()
    console.log('üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', finalStats)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π
    await validateDataIntegrity()
    
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!')
    return finalStats
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
  }
}

async function dropAllTables() {
  try {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    await db.run(sql`PRAGMA foreign_keys = OFF`)
    
    // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await db.run(sql`DROP TABLE IF EXISTS comments`)
    await db.run(sql`DROP TABLE IF EXISTS tasks`)
    await db.run(sql`DROP TABLE IF EXISTS project_members`)
    await db.run(sql`DROP TABLE IF EXISTS projects`)
    await db.run(sql`DROP TABLE IF EXISTS users`)
    
    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    await db.run(sql`PRAGMA foreign_keys = ON`)
    
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã')
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error)
  }
}

async function createPerformanceIndexes() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')
  
  try {
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_tasks_project_id ON tasks (project_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_tasks_assignee_id ON tasks (assignee_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks (status)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks (priority)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON tasks (created_at)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_project_members_project_id ON project_members (project_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_project_members_user_id ON project_members (user_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_comments_task_id ON comments (task_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_projects_owner_id ON projects (owner_id)`)
    await db.run(sql`CREATE INDEX IF NOT EXISTS idx_projects_status ON projects (status)`)
    
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã')
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã:', error)
  }
}

async function clearAllData() {
  try {
    // –û—á–∏—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
    await db.delete(comments)
    await db.delete(tasks) 
    await db.delete(projectMembers)
    await db.delete(projects)
    await db.delete(users)
    
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error)
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
  }
}

async function getDatabaseStats() {
  try {
    const [usersCount, projectsCount, tasksCount, membersCount, commentsCount] = await Promise.all([
      db.select({ count: sql<number>`count(*)` }).from(users),
      db.select({ count: sql<number>`count(*)` }).from(projects),
      db.select({ count: sql<number>`count(*)` }).from(tasks),
      db.select({ count: sql<number>`count(*)` }).from(projectMembers),
      db.select({ count: sql<number>`count(*)` }).from(comments)
    ])
    
    return {
      users: usersCount[0]?.count || 0,
      projects: projectsCount[0]?.count || 0,
      tasks: tasksCount[0]?.count || 0,
      members: membersCount[0]?.count || 0,
      comments: commentsCount[0]?.count || 0
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î:', error)
    return {
      users: 0,
      projects: 0,
      tasks: 0,
      members: 0,
      comments: 0
    }
  }
}

async function validateDataIntegrity() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned –∑–∞–ø–∏—Å–∏
    const orphanedTasks = await db
      .select({ count: sql<number>`count(*)` })
      .from(tasks)
      .leftJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
      .where(sql`${projects.id} IS NULL`)
    
    const orphanedMembers = await db
      .select({ count: sql<number>`count(*)` })
      .from(projectMembers)
      .leftJoin(projects, sql`${projectMembers.projectId} = ${projects.id}`)
      .where(sql`${projects.id} IS NULL`)
    
    if (orphanedTasks[0]?.count > 0) {
      console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${orphanedTasks[0].count}`)
    }
    
    if (orphanedMembers[0]?.count > 0) {
      console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${orphanedMembers[0].count}`)
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ development
export async function quickSetup() {
  console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î...')
  return await initializeDatabase({ 
    force: false, 
    seedData: true, 
    createIndexes: true 
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î
export async function resetDatabase() {
  console.log('üîÑ –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î...')
  return await initializeDatabase({ 
    force: true, 
    seedData: true, 
    createIndexes: true 
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
export async function checkDatabaseHealth() {
  console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...')
  
  try {
    const stats = await getDatabaseStats()
    await validateDataIntegrity()
    
    const health = {
      status: 'healthy',
      stats,
      timestamp: new Date().toISOString()
    }
    
    console.log('‚úÖ –ë–î –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
    return health
    
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î:', error)
    return {
      status: 'unhealthy',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      timestamp: new Date().toISOString()
    }
  }
}
