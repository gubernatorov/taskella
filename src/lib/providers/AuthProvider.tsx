'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User, AuthResponse } from '@/types/auth'
import { authApi, DevAuthRequest } from '@/lib/api/auth'

interface AuthContextType {
  user: User | null
  token: string | null
  isLoading: boolean
  isInitialized: boolean
  login: (initData: string) => Promise<void>
  devLogin: (userData: DevAuthRequest['user']) => Promise<void>
  logout: () => void
}

const AuthContext = createContext<AuthContextType | null>(null)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [token, setToken] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isInitialized, setIsInitialized] = useState(false)

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å—Ä–∞–∑—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
  useEffect(() => {
    console.log('üîÑ AuthProvider: Starting initialization')
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    setIsLoading(false)
    setIsInitialized(true)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    const savedToken = localStorage.getItem('auth_token')
    if (savedToken) {
      console.log('‚úÖ Token found in localStorage')
      setToken(savedToken)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
      authApi.getMe()
        .then(user => {
          console.log('‚úÖ User loaded successfully:', user?.id)
          setUser(user)
        })
        .catch(error => {
          console.log('‚ö†Ô∏è Could not load user data:', error)
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
          localStorage.removeItem('auth_token')
          setToken(null)
        })
    } else {
      console.log('üìù No token found in localStorage')
    }
  }, [])

  const login = async (initData: string) => {
    const timestamp = new Date().toISOString()
    console.log(`üîê [${timestamp}] LOGIN PROCESS START`)
    
    try {
      console.log(`üì° [${timestamp}] Calling auth API...`)
      const response = await authApi.login({ initData })
      
      console.log(`‚úÖ [${timestamp}] LOGIN SUCCESS:`)
      console.log(`  - User ID: ${response.user.id}`)
      console.log(`  - Token length: ${response.token.length}`)
      
      setUser(response.user)
      setToken(response.token)
      localStorage.setItem('auth_token', response.token)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (typeof window !== 'undefined') {
        document.cookie = `auth_token=${response.token}; path=/; max-age=2592000; secure; samesite=lax`
        console.log(`üç™ [${timestamp}] Cookie set for auth token`)
      }
    } catch (error: any) {
      console.error(`‚ùå [${timestamp}] LOGIN ERROR:`, error)
      throw error
    }
  }

  const devLogin = async (userData: DevAuthRequest['user']) => {
    const timestamp = new Date().toISOString()
    console.log(`üîê [${timestamp}] DEV LOGIN PROCESS START`)
    
    try {
      console.log(`üì° [${timestamp}] Calling dev auth API...`)
      const response = await authApi.devLogin({ user: userData })
      
      console.log(`‚úÖ [${timestamp}] DEV LOGIN SUCCESS:`)
      console.log(`  - User ID: ${response.user.id}`)
      console.log(`  - Token length: ${response.token.length}`)
      
      setUser(response.user)
      setToken(response.token)
      localStorage.setItem('auth_token', response.token)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (typeof window !== 'undefined') {
        document.cookie = `auth_token=${response.token}; path=/; max-age=2592000; secure; samesite=lax`
        console.log(`üç™ [${timestamp}] Cookie set for auth token`)
      }
    } catch (error: any) {
      console.error(`‚ùå [${timestamp}] DEV LOGIN ERROR:`, error)
      throw error
    }
  }

  const logout = () => {
    const timestamp = new Date().toISOString()
    console.log(`üö™ [${timestamp}] LOGOUT PROCESS START`)
    
    setUser(null)
    setToken(null)
    localStorage.removeItem('auth_token')
    
    // –û—á–∏—â–∞–µ–º cookie
    if (typeof window !== 'undefined') {
      document.cookie = 'auth_token=; path=/; max-age=0; secure; samesite=lax'
      console.log(`üç™ [${timestamp}] Cookie cleared`)
    }
    
    console.log(`‚úÖ [${timestamp}] LOGOUT COMPLETED`)
  }

  return (
    <AuthContext.Provider value={{ user, token, isLoading, isInitialized, login, devLogin, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuthContext() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuthContext must be used within AuthProvider')
  }
  return context
}
