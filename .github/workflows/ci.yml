name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Lint code
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level=high --production

  # Job –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate cache key for build
        id: cache-key
        run: echo "key=build-${{ github.sha }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: |
            .next/
            !.next/cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            build-${{ github.sha }}-
            build-

      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  # Job –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≥–æ—Ç–æ–≤ –∫ –≤–∫–ª—é—á–µ–Ω–∏—é –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Ç–µ—Å—Ç—ã)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    if: false  # –í–∫–ª—é—á–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ç–µ—Å—Ç—ã
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Run unit tests
        run: npm run test
        if: false  # –í–∫–ª—é—á–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç npm run test

      - name: Run API tests
        run: npm run test:api
        if: false  # –í–∫–ª—é—á–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç npm run test:api

      - name: Run e2e tests
        run: npm run test:e2e
        if: false  # –í–∫–ª—é—á–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç npm run test:e2e

  # Job –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Docker –æ–±—Ä–∞–∑–∞
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job –¥–ª—è –¥–µ–ø–ª–æ—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π –≤ production"
          echo "Docker –æ–±—Ä–∞–∑: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –≤ –≤–∞—à–µ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Kubernetes deployment, –∏–ª–∏ SSH –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä